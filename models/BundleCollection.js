const mongoose = require('mongoose');

const bundleCollectionSchema = new mongoose.Schema({
  name: {
    type: String,
    required: true,
    trim: true
  },
  description: {
    type: String,
    trim: true,
    default: ''
  },
  icon: {
    type: String,
    trim: true,
    default: 'üìö' // –≠–º–æ–¥–∑–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏
  },
  color: {
    type: String,
    trim: true,
    default: '#00AFFF' // –¶–≤–µ—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  },
  order: {
    type: Number,
    default: 0 // –î–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–π
  },
  collectionPrice: {
    type: Number,
    default: null // –¶–µ–Ω–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –≤ –æ—Å–Ω–æ–≤–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü–∞—Ö –≤–∞–ª—é—Ç—ã
  },
  collectionCurrency: {
    type: String,
    trim: true,
    uppercase: true,
    default: null // –í–∞–ª—é—Ç–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ (RUB, USD, EUR –∏ —Ç.–¥.)
  },
  isActive: {
    type: Boolean,
    default: true
  },
  createdAt: {
    type: Date,
    default: Date.now
  },
  updatedAt: {
    type: Date,
    default: Date.now
  }
});

// –ò–Ω–¥–µ–∫—Å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–ª–ª–µ–∫—Ü–∏–π
bundleCollectionSchema.index({ isActive: 1, order: 1 });

// Middleware –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è updatedAt
bundleCollectionSchema.pre('save', function(next) {
  this.updatedAt = Date.now();
  next();
});

module.exports = mongoose.model('BundleCollection', bundleCollectionSchema); 