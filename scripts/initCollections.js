const mongoose = require('mongoose');
const BundleCollection = require('../models/BundleCollection');
const ExerciseCollectionItem = require('../models/ExerciseCollectionItem');

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
const connectDB = async () => {
  try {
    await mongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/rhythmcapsule');
    console.log('MongoDB –ø–æ–¥–∫–ª—é—á–µ–Ω–∞');
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB:', error);
    process.exit(1);
  }
};

// –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∫–æ–ª–ª–µ–∫—Ü–∏–π
const createTestCollections = async () => {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
    const existingCollections = await BundleCollection.find();
    if (existingCollections.length > 0) {
      console.log('–ö–æ–ª–ª–µ–∫—Ü–∏–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç:', existingCollections.map(c => c.name));
      return existingCollections;
    }

    const testCollections = [
      {
        name: '–û—Å–Ω–æ–≤—ã',
        description: '–ë–∞–∑–æ–≤—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö',
        icon: 'ü•Å',
        color: '#00AFFF',
        order: 1
      },
      {
        name: '–†–∏—Ç–º—ã',
        description: '–†–∞–∑–ª–∏—á–Ω—ã–µ —Ä–∏—Ç–º–∏—á–µ—Å–∫–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã',
        icon: 'üéµ',
        color: '#32F9E5',
        order: 2
      },
      {
        name: '–¢–µ—Ö–Ω–∏–∫–∞',
        description: '–£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è —Ç–µ—Ö–Ω–∏–∫–∏',
        icon: '‚ö°',
        color: '#FDA20A',
        order: 3
      },
      {
        name: '–î–∂–∞–∑',
        description: '–î–∂–∞–∑–æ–≤—ã–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã –∏ –∏–º–ø—Ä–æ–≤–∏–∑–∞—Ü–∏—è',
        icon: 'üé∑',
        color: '#9B59B6',
        order: 4
      },
      {
        name: '–†–æ–∫',
        description: '–†–æ–∫-—Ä–∏—Ç–º—ã –∏ –≥—Ä—É–≤—ã',
        icon: 'ü§ò',
        color: '#E74C3C',
        order: 5
      }
    ];

    const createdCollections = await BundleCollection.insertMany(testCollections);
    console.log('–°–æ–∑–¥–∞–Ω—ã —Ç–µ—Å—Ç–æ–≤—ã–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏:');
    createdCollections.forEach(collection => {
      console.log(`- ${collection.name} (${collection.icon})`);
    });

    return createdCollections;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–π:', error);
    return [];
  }
};

// –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –±–∞–Ω–¥–ª–æ–≤ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
const assignBundlesToCollections = async (collections) => {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –±–∞–Ω–¥–ª—ã
    const bundles = await ExerciseCollectionItem.find({ 
      itemType: 'folder', 
      isBundle: true 
    });

    if (bundles.length === 0) {
      console.log('–ù–µ—Ç –±–∞–Ω–¥–ª–æ–≤ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏');
      return;
    }

    console.log(`–ù–∞–π–¥–µ–Ω–æ ${bundles.length} –±–∞–Ω–¥–ª–æ–≤ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏`);

    // –ù–∞–∑–Ω–∞—á–∞–µ–º –±–∞–Ω–¥–ª—ã –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –ø–æ –æ—á–µ—Ä–µ–¥–∏
    let assignedCount = 0;
    for (let i = 0; i < bundles.length; i++) {
      const bundle = bundles[i];
      const collection = collections[i % collections.length]; // –¶–∏–∫–ª–∏—á–µ—Å–∫–∏ –Ω–∞–∑–Ω–∞—á–∞–µ–º –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–Ω–¥–ª
      bundle.collectionId = collection._id;
      bundle.collectionOrder = Math.floor(i / collections.length); // –ü–æ—Ä—è–¥–æ–∫ –≤–Ω—É—Ç—Ä–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
      await bundle.save();
      
      console.log(`–ë–∞–Ω–¥–ª "${bundle.name}" –Ω–∞–∑–Ω–∞—á–µ–Ω –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é "${collection.name}" —Å –ø–æ—Ä—è–¥–∫–æ–º ${bundle.collectionOrder}`);
      assignedCount++;
    }

    console.log(`–£—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ ${assignedCount} –±–∞–Ω–¥–ª–æ–≤ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏`);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –±–∞–Ω–¥–ª–æ–≤ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏:', error);
  }
};

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
const run = async () => {
  await connectDB();
  const collections = await createTestCollections();
  if (collections.length > 0) {
    await assignBundlesToCollections(collections);
  }
  await mongoose.disconnect();
  console.log('–°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–µ–Ω');
};

run(); 