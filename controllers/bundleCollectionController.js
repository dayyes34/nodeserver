const BundleCollection = require('../models/BundleCollection');
const ExerciseCollectionItem = require('../models/ExerciseCollectionItem');

// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –±–∞–Ω–¥–ª–æ–≤
const getAllCollections = async (req, res) => {
  try {
    const collections = await BundleCollection.find({ isActive: true })
      .sort({ order: 1, name: 1 });

    // –î–ª—è –∫–∞–∂–¥–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –ø–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–Ω–¥–ª–æ–≤
    const collectionsWithCounts = await Promise.all(
      collections.map(async (collection) => {
        const bundleCount = await ExerciseCollectionItem.countDocuments({
          collectionId: collection._id,
          isBundle: true
        });

        return {
          _id: collection._id,
          name: collection.name,
          description: collection.description,
          icon: collection.icon,
          color: collection.color,
          order: collection.order,
          collectionPrice: collection.collectionPrice,
          collectionCurrency: collection.collectionCurrency,
          bundleCount,
          createdAt: collection.createdAt,
          updatedAt: collection.updatedAt
        };
      })
    );

    res.status(200).json(collectionsWithCounts);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–π:', error);
    res.status(500).json({ message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–π.' });
  }
};

// –ü–æ–ª—É—á–∏—Ç—å –±–∞–Ω–¥–ª—ã –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏
const getBundlesByCollection = async (req, res) => {
  try {
    const { collectionId } = req.params;

    if (!collectionId) {
      return res.status(400).json({ message: 'ID –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω.' });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–æ–ª–ª–µ–∫—Ü–∏—è
    const collection = await BundleCollection.findById(collectionId);
    if (!collection) {
      return res.status(404).json({ message: '–ö–æ–ª–ª–µ–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.' });
    }

    // –ü–æ–ª—É—á–∞–µ–º –±–∞–Ω–¥–ª—ã —ç—Ç–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏ —Å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π –ø–æ collectionOrder, –∑–∞—Ç–µ–º –ø–æ –∏–º–µ–Ω–∏
    const bundles = await ExerciseCollectionItem.find({
      collectionId: collectionId,
      isBundle: true
    }).sort({ collectionOrder: 1, name: 1 });

    const bundlesData = bundles.map(bundle => ({
      id: bundle._id,
      name: bundle.name,
      description: bundle.bundleDescription || '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è.',
      price: bundle.bundlePrice,
      currency: bundle.bundleCurrency,
      collectionOrder: bundle.collectionOrder,
      createdAt: bundle.createdAt
    }));

    res.status(200).json({
      collection: {
        _id: collection._id,
        name: collection.name,
        description: collection.description,
        icon: collection.icon,
        color: collection.color
      },
      bundles: bundlesData
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–Ω–¥–ª–æ–≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏:', error);
    res.status(500).json({ message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–Ω–¥–ª–æ–≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏.' });
  }
};

// –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∫–æ–ª–ª–µ–∫—Ü–∏—é
const createCollection = async (req, res) => {
  try {
    const { name, description, icon, color, order, collectionPrice, collectionCurrency } = req.body;

    if (!name || !name.trim()) {
      return res.status(400).json({ message: '–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ.' });
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ü–µ–Ω—ã –∏ –≤–∞–ª—é—Ç—ã
    let price = null;
    let currency = null;
    
    if (collectionPrice !== undefined && collectionPrice !== null) {
      const parsedPrice = parseFloat(collectionPrice);
      if (!isNaN(parsedPrice) && parsedPrice >= 0) {
        price = parsedPrice;
        
        if (!collectionCurrency || typeof collectionCurrency !== 'string' || collectionCurrency.trim().length !== 3) {
          return res.status(400).json({ 
            message: 'collectionCurrency (3-—Ö –±—É–∫–≤–µ–Ω–Ω—ã–π –∫–æ–¥) –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞ —Ü–µ–Ω–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–∏.' 
          });
        }
        currency = collectionCurrency.trim().toUpperCase();
      } else {
        return res.status(400).json({ message: 'collectionPrice –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.' });
      }
    }

    const newCollection = new BundleCollection({
      name: name.trim(),
      description: description ? description.trim() : '',
      icon: icon || 'üìö',
      color: color || '#00AFFF',
      order: order || 0,
      collectionPrice: price,
      collectionCurrency: currency
    });

    const savedCollection = await newCollection.save();
    res.status(201).json(savedCollection);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–∏:', error);
    res.status(500).json({ message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–∏.' });
  }
};

// –û–±–Ω–æ–≤–∏—Ç—å –∫–æ–ª–ª–µ–∫—Ü–∏—é
const updateCollection = async (req, res) => {
  try {
    const { collectionId } = req.params;
    const { name, description, icon, color, order, isActive, collectionPrice, collectionCurrency } = req.body;

    if (!collectionId) {
      return res.status(400).json({ message: 'ID –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω.' });
    }

    const updateData = {};
    if (name !== undefined) updateData.name = name.trim();
    if (description !== undefined) updateData.description = description.trim();
    if (icon !== undefined) updateData.icon = icon;
    if (color !== undefined) updateData.color = color;
    if (order !== undefined) updateData.order = order;
    if (isActive !== undefined) updateData.isActive = isActive;

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ü–µ–Ω—ã –∏ –≤–∞–ª—é—Ç—ã –∫–æ–ª–ª–µ–∫—Ü–∏–∏
    if (collectionPrice !== undefined) {
      if (collectionPrice === null) {
        updateData.collectionPrice = null;
        updateData.collectionCurrency = null;
      } else {
        const parsedPrice = parseFloat(collectionPrice);
        if (!isNaN(parsedPrice) && parsedPrice >= 0) {
          updateData.collectionPrice = parsedPrice;
          
          if (!collectionCurrency || typeof collectionCurrency !== 'string' || collectionCurrency.trim().length !== 3) {
            return res.status(400).json({ 
              message: 'collectionCurrency (3-—Ö –±—É–∫–≤–µ–Ω–Ω—ã–π –∫–æ–¥) –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞ —Ü–µ–Ω–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–∏.' 
            });
          }
          updateData.collectionCurrency = collectionCurrency.trim().toUpperCase();
        } else {
          return res.status(400).json({ message: 'collectionPrice –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.' });
        }
      }
    }

    updateData.updatedAt = new Date();

    const updatedCollection = await BundleCollection.findByIdAndUpdate(
      collectionId,
      updateData,
      { new: true, runValidators: true }
    );

    if (!updatedCollection) {
      return res.status(404).json({ message: '–ö–æ–ª–ª–µ–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.' });
    }

    res.status(200).json(updatedCollection);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–∏:', error);
    res.status(500).json({ message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–∏.' });
  }
};

// –£–¥–∞–ª–∏—Ç—å –∫–æ–ª–ª–µ–∫—Ü–∏—é
const deleteCollection = async (req, res) => {
  try {
    const { collectionId } = req.params;

    if (!collectionId) {
      return res.status(400).json({ message: 'ID –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω.' });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –±–∞–Ω–¥–ª—ã –≤ —ç—Ç–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏
    const bundleCount = await ExerciseCollectionItem.countDocuments({
      collectionId: collectionId,
      isBundle: true
    });

    if (bundleCount > 0) {
      return res.status(400).json({ 
        message: `–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –∫–æ–ª–ª–µ–∫—Ü–∏—é, –≤ –∫–æ—Ç–æ—Ä–æ–π –µ—Å—Ç—å –±–∞–Ω–¥–ª—ã (${bundleCount} —à—Ç.). –°–Ω–∞—á–∞–ª–∞ –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç–µ –∏–ª–∏ —É–¥–∞–ª–∏—Ç–µ –±–∞–Ω–¥–ª—ã.` 
      });
    }

    const deletedCollection = await BundleCollection.findByIdAndDelete(collectionId);

    if (!deletedCollection) {
      return res.status(404).json({ message: '–ö–æ–ª–ª–µ–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.' });
    }

    res.status(200).json({ message: '–ö–æ–ª–ª–µ–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.' });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–∏:', error);
    res.status(500).json({ message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–∏.' });
  }
};

// –ù–∞–∑–Ω–∞—á–∏—Ç—å –±–∞–Ω–¥–ª –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é
const assignBundleToCollection = async (req, res) => {
  try {
    const { bundleId, collectionId } = req.body;

    if (!bundleId) {
      return res.status(400).json({ message: 'ID –±–∞–Ω–¥–ª–∞ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω.' });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–∞–Ω–¥–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    const bundle = await ExerciseCollectionItem.findById(bundleId);
    if (!bundle) {
      return res.status(404).json({ message: '–ë–∞–Ω–¥–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.' });
    }

    if (!bundle.isBundle) {
      return res.status(400).json({ message: '–£–∫–∞–∑–∞–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –±–∞–Ω–¥–ª–æ–º.' });
    }

    // –ï—Å–ª–∏ collectionId —É–∫–∞–∑–∞–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–ª–ª–µ–∫—Ü–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if (collectionId) {
      const collection = await BundleCollection.findById(collectionId);
      if (!collection) {
        return res.status(404).json({ message: '–ö–æ–ª–ª–µ–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.' });
      }
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–Ω–¥–ª
    bundle.collectionId = collectionId || null;
    await bundle.save();

    res.status(200).json({ 
      message: collectionId ? '–ë–∞–Ω–¥–ª —É—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é.' : '–ë–∞–Ω–¥–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏.',
      bundle: {
        id: bundle._id,
        name: bundle.name,
        collectionId: bundle.collectionId
      }
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –±–∞–Ω–¥–ª–∞ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é:', error);
    res.status(500).json({ message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –±–∞–Ω–¥–ª–∞ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é.' });
  }
};

// –ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –¥–ª—è –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
const getCollectionDetails = async (req, res) => {
  try {
    const { collectionId } = req.params;
    
    if (!collectionId) {
      return res.status(400).json({ message: 'ID –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω.' });
    }

    const collection = await BundleCollection.findById(collectionId);
    
    if (!collection) {
      return res.status(404).json({ message: '–ö–æ–ª–ª–µ–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.' });
    }

    if (!collection.isActive) {
      return res.status(400).json({ message: '–ö–æ–ª–ª–µ–∫—Ü–∏—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞.' });
    }

    if (!collection.collectionPrice) {
      return res.status(400).json({ message: '–£ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Ü–µ–Ω–∞.' });
    }

    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ü–µ–Ω—É –≤ –Ω–∞–∏–º–µ–Ω—å—à–∏–µ –µ–¥–∏–Ω–∏—Ü—ã –≤–∞–ª—é—Ç—ã
    // collectionPrice –≤ –±–∞–∑–µ —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ –æ—Å–Ω–æ–≤–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü–∞—Ö (—Ä—É–±–ª–∏, –¥–æ–ª–ª–∞—Ä—ã)
    // Telegram API –æ–∂–∏–¥–∞–µ—Ç —Ü–µ–Ω—É –≤ –Ω–∞–∏–º–µ–Ω—å—à–∏—Ö –µ–¥–∏–Ω–∏—Ü–∞—Ö (–∫–æ–ø–µ–π–∫–∏, —Ü–µ–Ω—Ç—ã)
    const priceInSmallestUnit = Math.round(collection.collectionPrice * 100);

    // –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ, –æ–∂–∏–¥–∞–µ–º–æ–º telegram —Å–µ—Ä–≤–µ—Ä–æ–º
    const collectionDetails = {
      id: collection._id,
      title: collection.name,
      description: collection.description || '',
      price_in_smallest_unit: priceInSmallestUnit, // –¶–µ–Ω–∞ –≤ –∫–æ–ø–µ–π–∫–∞—Ö/—Ü–µ–Ω—Ç–∞—Ö
      currency: collection.collectionCurrency || 'RUB',
      icon: collection.icon,
      color: collection.color
    };

    console.log(`Collection details for ${collectionId}: price ${collection.collectionPrice} ${collection.collectionCurrency} -> ${priceInSmallestUnit} smallest units`);
    res.status(200).json(collectionDetails);

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏:', error);
    res.status(500).json({ message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏.' });
  }
};

module.exports = {
  getAllCollections,
  getBundlesByCollection,
  createCollection,
  updateCollection,
  deleteCollection,
  assignBundleToCollection,
  getCollectionDetails
}; 